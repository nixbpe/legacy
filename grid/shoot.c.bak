#include<stdio.h>
#include<math.h>
typedef double var;
typedef struct vector
{
        double x;
	double y;
        double sx;
        double sy;
}vector;

typedef struct circle
{
        double x;
        double y;
        double r;
	int  type;
}circle;

typedef struct point
{
    var x;
    var y;

}point;

typedef struct area{
	var x1,x2,y1,y2;
}area;
// ใ้ชตรวจสอบว่า vector ัตัดวงกลม ?
double IsImpact(vector u,circle c);
var Dotvector(vector x,vector y);
var Absolute(vector x);
vector Unitvector(vector x);
// หาจุดตัดของ vector กับ วงกลม
vector Findjudtud(circle x,vector chon,double b); 
vector Plus(vector x,vector y);
vector Minus(vector x,vector y);
// หา vector สะท้อน
vector Findnew(vector in,circle cc);
int main()
{
	circle op[1000];
	area tb;
	vector in,tmp,tmp2;
	int impact = -1,ti=-1;
	int count = 0;
	int n=10;
	int i;
	double b=-1;
	double tmp_b;
	double min = 9999;
	int score = 0;
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		scanf("%lf %lf %lf %d",&op[i].x,&op[i].y,&op[i].r,&op[i].type);
	}
	scanf("%lf %lf %lf %lf",&in.sx,&in.sy,&in.x,&in.y);
	score = 0;
	while(1)
	{
		printf("%.5lf,%.5lf\n",in.sx,in.sy);
		b = 0;
		impact = -1;
		min = 9999;
		for(i=0;i<n;i++)
		{
			//printf("%d\n",op[i].type);
			if(op[i].type == 0)
			{
				b = IsImpact(in,op[i]);
				//printf("%d %lf \n ",i,b);
				if(b>0.00001 && i!=ti)
				{
					tmp = Findjudtud(op[i],in,b);
					if(Absolute(tmp) < min && Absolute(tmp)>=0.000001)
					{
						min = Absolute(tmp);
						tmp2 = tmp;
						impact = i;
					}
				}
			}
		}
		if(impact != -1 && count <= 100)
		{
			count++;
			ti=impact;
			in = Findnew(tmp2,op[impact]);
			for(i=0;i<n;i++)
			{
				b=IsImpact(in,op[i]);
				tmp = Findjudtud(op[i],in,b);
				if(b>0.00001)
				{ 
					if(op[i].type==1)
						score+=10;
					if(op[i].type==2)
						score+=1000;
					if(op[i].type == 1 || op[i].type==2)
						op[i].type = -1; 
				}				
			}
		}
		else
			break;
		score++;
		//printf("score :%d\n",score);
	}
	printf("score :%d\n",score);
	// ให้ vector วิ่งให้ตกขอบ
	in.x*=1000;
	in.y*=1000;
	in.sx+=in.x;
	in.sy+=in.y;
	printf("%.5lf,%.5lf",in.sx,in.sy);
}

double IsImpact(vector u,circle c)
{
        double b;
        double size;
        vector v;
        // หา unit vector
        // หาขนาดของ vector
        size = Absolute(u);
        u.x/=size;
        u.y/=size;
        // หา vector ตัวที่สอง
        v.x = c.x - u.sx;
        v.y = c.y - u.sy;
        v.sy = u.sy;
	v.sx = u.sx;
        size = Dotvector(v,u);

        b = sqrt( pow(Absolute(v),2)-pow(size,2) );
        if ( b < c.r && size>0)
                return b;
        else
                return 0;
}


var Dotvector(vector x,vector y)
{    
     var sum = x.x*y.x + x.y*y.y;
     return sum;   
}

var Absolute(vector x)
{
     var temp;
     temp = sqrt((x.x*x.x)+(x.y*x.y));
     return temp;
}

vector Unitvector(vector x)
{
    double length=Absolute(x);
    x.x=x.x/length;
    x.y=x.y/length;
    return x;
}

vector Findjudtud(circle x,vector chon,double b)
{
    double len;
    double a;
    point tmp;
    vector v;
    v.x=x.x-chon.sx;
    v.y=x.y-chon.sy;
    len=Dotvector(v,Unitvector(chon));
    a= sqrt((x.r*x.r)-(b*b));
    len=len-a;
    chon=Unitvector(chon);
    chon.x=chon.x*len;
    chon.y=chon.y*len; 
    return chon;
}

vector Plus(vector x,vector y)
{
       vector res;
       res.x = x.x+y.x;
       res.y = x.y+y.y;
       res.sx = 0;
       res.sy = 0;
       return res;
}

vector Minus(vector x,vector y)
{
       vector res;
       res.x = x.x-y.x;
       res.y = x.y-y.y;
       res.sx = 0;
       res.sy = 0;
       return res;
}

vector Findnew(vector in,circle cc)
{
       vector u;
       vector temp;
       point judtud;
       judtud.x=in.x+in.sx;
       judtud.y=in.y+in.sy;  
       u.x = -(cc.y-judtud.y); //- y
       u.y = cc.x-judtud.x;  // x
       u.sx = 0;
       u.sy = 0;
       double angle = acos(Dotvector(u,in)/(Absolute(in)*Absolute(u)));
	//printf("angle : %lf\n",angle);
       if(angle > 22.0/14.0)
       {
                u.x = cc.y-judtud.y;
                u.y = -(cc.x-judtud.x);     
       }
       u = Unitvector(u);
       in.x = -in.x;
       in.y = -in.y;
       temp.x = 2*Dotvector(in,u);
       temp.y = 2*Dotvector(in,u);
       temp.sx = 0;
       temp.sy = 0;
       u.x = u.x*temp.x;
       u.y = u.y*temp.y;
       temp = Minus(in,u);
       temp.sx = judtud.x;
       temp.sy = judtud.y;
       return temp;
}
